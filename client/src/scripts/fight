type Pattern = RegExp | string;

const stats: any = null;
const navigation: any = null;

function watch(pattern: Pattern | Pattern[], handler: () => {}) {
  return { remove() {} };
}

function expect(pattern: Pattern) {
  return {
    then(handler: Function) {},
    timeout(seconds: number) {},
    wait(seconds: number) {},
  };
}

function regex(pattern: string) {
  return new RegExp(pattern, 'g');
}

// ----------------

async function fight(target: string) {
  let isTargetDead = true;
  let isDone = false;

  const attackSubscription = watch(
    [
      regex(`Tu (?<attack>\\w+) (?<effect>\\w+) a( |\\w)+ ${target}.`),
      regex(`El ataque de( |\\w)+ ${target} te (?<effect>\w+).`),
    ],
    update,
  );

  write(`kill ${target}`);

  await Promise.race([
    expect(`${target} ha MUERTO!!`).then(() => (isTargetDead = true)),
    expect('Huyes como un cobarde del combate.'),
    navigation.whenRecall,
  ]);

  isDone = true;
  attackSubscription.remove();

  async function update() {
    if (stats.hp < 0.1) {
      await navigation.recall();
    } else if (stats.mv < 15 || stats.hp < 0.3) {
      write('huir');
    }
  }
}
